{"version":3,"sources":["components/utils/useApiF1.js","components/Season/Select/Select.js","components/Season/Search/Search.js","pages/Season/Season.js","components/Schedule/Table/Table.js","components/Schedule/Search/Search.js","pages/Schedule/Schedule.js","components/Qualifying/Table/Table.js","components/Qualifying/Search/Search.js","components/Result/Table/Table.js","components/Result/Search/Search.js","components/Constructor/Standing/Table/Table.js","components/Constructor/Standing/Search/Search.js","components/Driver/Standing/Table/Table.js","components/Driver/Standing/Search/Search.js","components/Detail/Card/Card.js","App.js","index.js"],"names":["initialRequestInfo","error","data","loading","useApiF1","config","useState","requestInfo","setRequestInfo","localConfig","a","response","axios","baseURL","onCompleted","Title","Typography","Option","text","Select","SeasonSelect","seasons","season","setSeason","disabled","setDisabled","history","useHistory","type","message","banner","MRData","SeasonTable","Seasons","length","span","justify","align","showSearch","style","width","placeholder","optionFilterProp","filterOption","input","option","children","toLowerCase","indexOf","size","onChange","value","sort","b","localeCompare","map","index","padding","shape","onClick","push","SeasonSearch","url","method","params","limit","load","loadInfo","useEffect","PageSeason","ScheduleTable","schedules","columns","title","dataIndex","key","render","Circuit","circuitName","Location","locality","country","record","pathname","state","detail","RaceTable","Races","dataSource","scroll","x","y","bordered","rowKey","ScheduleSearch","PageSchedule","useParams","QualifyingTable","qualifyings","Driver","givenName","familyName","Constructor","name","QualifyingResults","QualifyingSearch","round","ResultTable","results","Time","time","Results","ResultSearch","ConstructorStandingTable","standings","StandingsTable","StandingsLists","nationality","ConstructorStandings","ConstructorStandingSearch","DriverStandingTable","Constructors","DriverStandings","DriverStandingSearch","TabPane","Tabs","DetailCard","location","useLocation","raceName","Item","label","date","defaultActiveKey","tab","Header","Layout","Footer","Content","Text","routes","path","component","App","basename","process","level","className","route","exact","textAlign","backgroundColor","ReactDOM","StrictMode","locale","ptBR","document","getElementById"],"mappings":"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","file":"static/js/main.ad051b26.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport axios from 'axios';\n\nconst initialRequestInfo = {\n    error: null,\n    data: null,\n    loading: false,\n};\n\nexport default function useApiF1(config){\n    const [requestInfo, setRequestInfo] = useState(initialRequestInfo);\n\n    async function call(localConfig){\n        setRequestInfo({\n            ...initialRequestInfo,\n            loading: true,\n        });\n\n        let response = null;\n\n        try{\n            response = await axios({\n                baseURL: 'https://ergast.com',\n                ...config,\n                ...localConfig,\n            });\n\n            setRequestInfo({\n                ...initialRequestInfo,\n                data: response.data,\n            });\n        }\n        catch(error){\n            setRequestInfo({\n                ...initialRequestInfo,\n                error,\n            });\n        };\n\n        if(config.onCompleted){\n            config.onCompleted(response);\n        };\n    };\n\n    return[\n        call,\n        requestInfo\n    ];\n};","import React, { useState } from 'react';\nimport { Alert, Row, Col, Typography, Select, Button } from 'antd';\nimport { useHistory } from 'react-router';\n\nconst { Title, text } = Typography;\nconst { Option } = Select;\n\nconst SeasonSelect = ({ loading, error, seasons }) => {\n    const [season, setSeason] = useState(0);\n    const [disabled, setDisabled] = useState(true);\n    const history = useHistory();\n\n    if(error){\n        return <Alert type='error' message='Error' banner />\n    };\n\n    if(loading || seasons === null){\n        return <Alert type='success' message='Loading...' banner />\n    };\n\n    if(seasons.MRData.SeasonTable.Seasons.length === 0){\n        return <Alert type='warning' message='No records found.' />\n    };\n\n    const onChange = (value) => {\n        setDisabled(value !== 0 ? false : true);\n        setSeason(value);\n    };\n\n    const onClick = () => {\n        history.push(`/schedule/${season}`);\n    };\n\n    return(\n        <>\n            <Row>\n                <Col\n                    span={24}\n                    justify='center'\n                    align='middle'\n                >\n                    <Title>Seasons</Title>\n                </Col>\n            </Row>\n            <Row>\n                <Col\n                    span={24}\n                    justify='center'\n                    align='middle'\n                >\n                    <Select \n                        showSearch\n                        style={{ width: 300 }}\n                        placeholder='Select a Season'\n                        optionFilterProp='children'\n                        filterOption={(input, option) => (\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                        )}\n                        size='large'\n                        onChange={onChange}\n                    >\n                        {seasons.MRData.SeasonTable.Seasons.sort((a, b) => b.season.localeCompare(a.season)).map((season, index) => (\n                            <Option key={index} value={season.season}>{season.season}</Option>\n                        ))}\n                    </Select>\n                </Col>\n            </Row>\n            <Row>\n                <Col\n                    span={24}\n                    justify='center'\n                    align='middle'\n                    style={{ padding: '10px' }}\n                >\n                    <Button\n                        type='primary'\n                        shape='round'\n                        size='large'\n                        disabled={disabled}\n                        onClick={onClick}\n                    >Schedule</Button>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default SeasonSelect;","import React, { useEffect } from 'react';\nimport useApiF1 from 'components/utils/useApiF1';\nimport SeasonSelect from '../Select/Select';\n\nconst SeasonSearch = () => {\n    const limit = 1000;\n    const [load, loadInfo] = useApiF1({\n        url: `/api/f1/seasons.json`,\n        method: 'get',\n        params: {\n            limit\n        }\n    });\n\n    useEffect(() => {\n        load();\n    }, []);\n\n    return(\n        <SeasonSelect\n            seasons={loadInfo.data}\n            loading={loadInfo.loading}\n            error={loadInfo.error}\n        />\n    );\n};\n\nexport default SeasonSearch;","import React from 'react';\nimport SeasonSearch from 'components/Season/Search/Search';\n\nconst PageSeason = () => {\n    return(\n        <SeasonSearch />\n    );\n};\n\nexport default PageSeason;","import React from 'react';\nimport { Alert, Row, Col, Table, Button } from 'antd';\nimport { useHistory } from 'react-router';\n\nconst ScheduleTable = ({ loading, error, schedules }) => {\n    const history = useHistory();\n    const columns = [\n        {\n            title: 'Round',\n            dataIndex: 'round',\n            key: 'round'\n        },\n        {\n            title: 'Race Name',\n            dataIndex: 'raceName',\n            key: 'raceName'\n        },\n        {\n            title: 'Date',\n            dataIndex: 'date',\n            key: 'date'\n        },\n        {\n            title: 'Time',\n            dataIndex: 'time',\n            key: 'time'\n        },\n        {\n            title: 'Circuit',\n            dataIndex: 'Circuit',\n            key: 'Circuit',\n            render: Circuit => \n                Circuit.circuitName\n        },\n        {\n            title: 'Locality',\n            dataIndex: 'Circuit',\n            key: 'Circuit',\n            render: Circuit => \n                Circuit.Location.locality\n        },\n        {\n            title: 'Country',\n            dataIndex: 'Circuit',\n            key: 'Circuit',\n            render: Circuit => \n                Circuit.Location.country\n        },\n        {\n            title: '',\n            dataIndex: 'Races',\n            key: 'Races',\n            render: (text, record) => (\n                <Button \n                    type='primary' \n                    shape='round'\n                    onClick={() => {\n                        history.push({\n                            pathname: `/details`,\n                            state: {\n                                detail: {record}\n                            }\n                        })\n                    }}\n                >\n                    More details\n                </Button>\n            )\n        }\n    ];\n\n    if(error){\n        return <Alert type='error' message='Error' banner />\n    };\n\n    if(loading || schedules === null){\n        return <Alert type='success' message='Loading...' banner />\n    };\n\n    if(schedules.MRData.RaceTable.Races.length === 0){\n        return <Alert type='warning' message='No records found.' />\n    };\n\n    return(\n        <>\n            <Row>\n                <Col\n                    span={24}\n                >\n                    <Table \n                        columns={columns} \n                        dataSource={schedules.MRData.RaceTable.Races} \n                        scroll={{ x: 1500, y: 600 }}\n                        bordered\n                        title={() => `Schedule ${schedules.MRData.RaceTable.season}`}\n                        rowKey='round'\n                    />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default ScheduleTable;","import React, { useEffect } from 'react';\nimport useApiF1 from 'components/utils/useApiF1';\nimport ScheduleTable from '../Table/Table';\n\nconst ScheduleSearch = ({ season }) => {\n    const [load, loadInfo] = useApiF1({\n        url: `/api/f1/${season}.json`,\n        method: 'get',\n    });\n\n    useEffect(() => {\n        load();\n    }, []);\n\n    return(\n        <ScheduleTable\n            schedules={loadInfo.data}\n            loading={loadInfo.loading}\n            error={loadInfo.error}\n        />\n    );\n};\n\nexport default ScheduleSearch;","import ScheduleSearch from 'components/Schedule/Search/Search';\nimport React from 'react';\nimport { useParams } from 'react-router';\n\nconst PageSchedule = () => {\n    const { season } = useParams();\n\n    return(\n        <ScheduleSearch season={season} />\n    );\n};\n\nexport default PageSchedule;","import React from 'react';\nimport { Alert, Table } from 'antd';\n\nconst QualifyingTable = ({ loading, error, qualifyings }) => {\n    const columns = [\n        {\n            title: 'Pos',\n            dataIndex: 'position',\n            key: 'position'\n        },\n        {\n            title: 'No',\n            dataIndex: 'number',\n            key: 'number'\n        },\n        {\n            title: 'Driver',\n            dataIndex: 'Driver',\n            key: 'Driver',\n            render: Driver => {\n                return Driver.givenName + ' ' + Driver.familyName;\n            }\n        },\n        {\n            title: 'Constructor',\n            dataIndex: 'Constructor',\n            key: 'Constructor',\n            render: Constructor => {\n                return Constructor.name;\n            }\n        },\n        {\n            title: 'Q1',\n            dataIndex: 'Q1',\n            key: 'Q1',\n        },\n        {\n            title: 'Q2',\n            dataIndex: 'Q2',\n            key: 'Q2',\n        },\n        {\n            title: 'Q3',\n            dataIndex: 'Q3',\n            key: 'Q3',\n        }\n    ];\n\n    if(error){\n        return <Alert type='error' message='Error' banner />\n    };\n\n    if(loading || qualifyings === null){\n        return <Alert type='success' message='Loading...' banner />\n    };\n\n    if(qualifyings.MRData.RaceTable.Races.length === 0){\n        return <Alert type='warning' message='No records found.' banner />\n    };\n\n    return(\n        <Table\n            scroll={{ x: 1500, y: 200 }}\n            columns={columns}\n            dataSource={qualifyings.MRData.RaceTable.Races[0].QualifyingResults}\n            rowKey='position'\n        />\n    );\n};\n\nexport default QualifyingTable;\n","import React, { useEffect } from 'react';\nimport useApiF1 from 'components/utils/useApiF1';\nimport QualifyingTable from '../Table/Table';\n\nconst QualifyingSearch = ({ season, round }) => {\n    const [load, loadInfo] = useApiF1({\n        url: `/api/f1/${season}/${round}/qualifying.json`,\n        method: 'get',\n    });\n\n    useEffect(() => {\n        load();\n    }, []);\n\n    return(\n        <QualifyingTable\n            qualifyings={loadInfo.data}\n            loading={loadInfo.loading}\n            error={loadInfo.error}\n        />\n    );\n};\n\nexport default QualifyingSearch;","import React from 'react';\nimport { Alert, Table } from 'antd';\n\nconst ResultTable = ({ loading, error, results }) => {\n    const columns = [\n        {\n            title: 'Pos',\n            dataIndex: 'position',\n            key: 'position'\n        },\n        {\n            title: 'No',\n            dataIndex: 'number',\n            key: 'number'\n        },\n        {\n            title: 'Driver',\n            dataIndex: 'Driver',\n            key: 'Driver',\n            render: Driver => {\n                return Driver.givenName + ' ' + Driver.familyName;\n            }\n        },\n        {\n            title: 'Constructor',\n            dataIndex: 'Constructor',\n            key: 'Constructor',\n            render: Constructor => {\n                return Constructor.name;\n            }\n        },\n        {\n            title: 'Laps',\n            dataIndex: 'laps',\n            key: 'laps',\n        },\n        {\n            title: 'Grid',\n            dataIndex: 'grid',\n            key: 'grid',\n        },\n        {\n            title: 'Time',\n            dataIndex: 'Time',\n            key: 'Time',\n            render: Time => {\n                return Time ? Time.time : '-'\n            }\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n            key: 'status',\n        },\n        {\n            title: 'Points',\n            dataIndex: 'points',\n            key: 'points',\n        },\n    ];\n\n    if(error){\n        return <Alert type='error' message='Error' banner />\n    };\n\n    if(loading || results === null){\n        return <Alert type='success' message='Loading...' banner />\n    };\n\n    if(results.MRData.RaceTable.Races.length === 0){\n        return <Alert type='warning' message='No records found.' banner />\n    };\n\n    return(\n        <Table\n            scroll={{ x: 1500, y: 200 }}\n            columns={columns}\n            dataSource={results.MRData.RaceTable.Races[0].Results}\n            rowKey='position'\n        />\n    );\n};\n\nexport default ResultTable;\n","import React, { useEffect } from 'react';\nimport useApiF1 from 'components/utils/useApiF1';\nimport ResultTable from '../Table/Table';\n\nconst ResultSearch = ({ season, round }) => {\n    const [load, loadInfo] = useApiF1({\n        url: `/api/f1/${season}/${round}/results.json`,\n        method: 'get',\n    });\n\n    useEffect(() => {\n        load();\n    }, []);\n\n    return(\n        <ResultTable\n            results={loadInfo.data}\n            loading={loadInfo.loading}\n            error={loadInfo.error}\n        />\n    );\n};\n\nexport default ResultSearch;","import React from 'react';\nimport { Alert, Table } from 'antd';\n\nconst ConstructorStandingTable = ({ loading, error, standings }) => {\n    const columns = [\n        {\n            title: 'Pos',\n            dataIndex: 'position',\n            key: 'position'\n        },\n        {\n            title: 'Constructor',\n            dataIndex: 'Constructor',\n            key: 'Constructor',\n            render: Constructor => {\n                return Constructor.name;\n            }\n        },\n        {\n            title: 'Nationality',\n            dataIndex: 'Constructor',\n            key: 'nationality',\n            render: Constructor => {\n                return Constructor.nationality;\n            }\n        },\n        {\n            title: 'Points',\n            dataIndex: 'points',\n            key: 'points',\n        },\n        {\n            title: 'Wins',\n            dataIndex: 'wins',\n            key: 'wins',\n        }\n    ];\n\n    if(error){\n        return <Alert type='error' message='An unexpected error happened.' banner />;\n    };\n\n    if(loading || standings === null){        \n        return <Alert type='success' message='Loading...' banner />;\n    };\n\n    if(standings.MRData.StandingsTable.StandingsLists.length === 0){\n        return <Alert type='warning' message='No records found.' banner />;\n    };\n    \n    return(\n        <Table\n            scroll={{ x: 1500, y: 200 }}\n            columns={columns}\n            dataSource={standings.MRData.StandingsTable.StandingsLists[0].ConstructorStandings}\n            rowKey='position'\n        />\n    );\n};\n\nexport default ConstructorStandingTable;\n","import React, { useEffect } from 'react';\nimport useApiF1 from 'components/utils/useApiF1';\nimport ConstructorStandingTable from '../Table/Table';\n\nconst ConstructorStandingSearch = ({ season, round }) => {\n    const [load, loadInfo] = useApiF1({\n        url: `/api/f1/${season}/${round}/constructorStandings.json`,\n        method: 'get',\n    });\n\n    useEffect(() => {\n        load();\n    }, []);\n\n    return(\n        <ConstructorStandingTable\n            standings={loadInfo.data}\n            loading={loadInfo.loading}\n            error={loadInfo.error}\n        />\n    );\n};\n\nexport default ConstructorStandingSearch;","import React from 'react';\nimport { Alert, Table } from 'antd';\n\nconst DriverStandingTable = ({ loading, error, standings }) => {\n    const columns = [\n        {\n            title: 'Pos',\n            dataIndex: 'position',\n            key: 'position'\n        },\n        {\n            title: 'Driver',\n            dataIndex: 'Driver',\n            key: 'Driver',\n            render: Driver => {\n                return Driver.givenName + ' ' + Driver.familyName;\n            }\n        },\n        {\n            title: 'Constructor',\n            dataIndex: 'Constructors',\n            key: 'Constructors',\n            render: Constructors => {\n                return Constructors[0].name;\n            }\n        },\n        {\n            title: 'Points',\n            dataIndex: 'points',\n            key: 'points',\n        },\n        {\n            title: 'Wins',\n            dataIndex: 'wins',\n            key: 'wins',\n        }\n    ];\n\n    if(error){\n        return <Alert type='error' message='An unexpected error happened.' banner />;\n    };\n\n    if(loading || standings === null){        \n        return <Alert type='success' message='Loading...' banner />;\n    };\n\n    if(standings.MRData.StandingsTable.StandingsLists.length === 0){\n        return <Alert type='warning' message='No records found.' banner />;\n    };\n    \n    return(\n        <Table\n            scroll={{ x: 1500, y: 200 }}\n            columns={columns}\n            dataSource={standings.MRData.StandingsTable.StandingsLists[0].DriverStandings}\n            rowKey='position'\n        />\n    );\n};\n\nexport default DriverStandingTable;\n","import React, { useEffect } from 'react';\nimport useApiF1 from 'components/utils/useApiF1';\nimport DriverStandingTable from '../Table/Table';\n\nconst DriverStandingSearch = ({ season, round }) => {\n    const [load, loadInfo] = useApiF1({\n        url: `/api/f1/${season}/${round}/driverStandings.json`,\n        method: 'get',\n    });\n\n    useEffect(() => {\n        load();\n    }, []);\n\n    return(\n        <DriverStandingTable\n            standings={loadInfo.data}\n            loading={loadInfo.loading}\n            error={loadInfo.error}\n        />\n    );\n};\n\nexport default DriverStandingSearch;","import React from 'react';\nimport { Row, Col, Descriptions, Tabs } from 'antd';\nimport { useLocation } from 'react-router';\nimport QualifyingSearch from 'components/Qualifying/Search/Search';\nimport ResultSearch from 'components/Result/Search/Search';\nimport ConstructorStandingSearch from 'components/Constructor/Standing/Search/Search';\nimport DriverStandingSearch from 'components/Driver/Standing/Search/Search';\n\nconst { TabPane } = Tabs;\n\nconst DetailCard = () => {\n    const location = useLocation();\n\n    const callback = (key) => {\n        //console.log(key);\n    };\n\n    return(\n        <Row>\n            <Col\n                span={24}\n                justify='center'\n                align='middle'\n            >\n                <Descriptions\n                    title={location.state.detail.record.raceName}\n                >\n                    <Descriptions.Item label='Season'>\n                        {location.state.detail.record.season}\n                    </Descriptions.Item>\n                    <Descriptions.Item label='Round'>\n                        {location.state.detail.record.round}\n                    </Descriptions.Item>\n                    <Descriptions.Item label='Location'>\n                        {location.state.detail.record.Circuit.Location.locality} / {location.state.detail.record.Circuit.Location.country}\n                    </Descriptions.Item>\n                    <Descriptions.Item label='Date'>\n                        {location.state.detail.record.date}\n                    </Descriptions.Item>\n                    <Descriptions.Item label='Time'>\n                        {location.state.detail.record.time}\n                    </Descriptions.Item>\n                    <Descriptions.Item label='Circuit Name'>\n                        {location.state.detail.record.Circuit.circuitName}\n                    </Descriptions.Item>\n                </Descriptions>\n            </Col>\n            <Col\n                span={24}\n                justify='center'\n            >\n                <Tabs \n                    defaultActiveKey='1'\n                    onChange={callback}\n                    type='card'\n                >\n                    <TabPane tab='Qualifying' key='1'>\n                        <QualifyingSearch\n                            season={location.state.detail.record.season}\n                            round={location.state.detail.record.round}\n                        />\n                    </TabPane>\n                    <TabPane tab='Results' key='2'>\n                        <ResultSearch\n                            season={location.state.detail.record.season}\n                            round={location.state.detail.record.round}\n                        />\n                    </TabPane>\n                    <TabPane tab='Constructor' key='3'>\n                        <ConstructorStandingSearch\n                            season={location.state.detail.record.season}\n                            round={location.state.detail.record.round}\n                        />\n                    </TabPane>\n                    <TabPane tab='Driver' key='4'>\n                        <DriverStandingSearch\n                            season={location.state.detail.record.season}\n                            round={location.state.detail.record.round}\n                        />\n                    </TabPane>\n                </Tabs>\n            </Col>\n        </Row>\n    );\n};\n\nexport default DetailCard;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useHistory,\n  useLocation\n} from 'react-router-dom';\nimport { Layout, Typography, Space } from 'antd';\nimport './App.css';\nimport PageSeason from 'pages/Season/Season';\nimport PageSchedule from 'pages/Schedule/Schedule';\nimport DetailCard from 'components/Detail/Card/Card';\nimport QualifyingSearch from 'components/Qualifying/Search/Search';\nimport ResultSearch from 'components/Result/Search/Search';\nimport ConstructorStandingSearch from 'components/Constructor/Standing/Search/Search';\n\nconst { Header, Footer, Content } = Layout;\nconst { Title, Text } = Typography;\n\nconst routes = [\n  {\n    path: '/',\n    component: PageSeason,\n  },\n  {\n    path: '/schedule/:season',\n    component: PageSchedule,\n  },\n  {\n    path: '/details',\n    component: DetailCard\n  },\n];\n\nconst App = () => {\n  return(\n    <>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Layout>\n          <Header>\n            <Space>\n              <Title type='success' level={1}>F1</Title>\n              <Text type='success'>Racing</Text>\n            </Space>\n          </Header>\n          <Content>\n            <div className='layout-content'>\n              <Switch>\n                {routes.map((route, index) => (\n                  <Route\n                    key={index}\n                    exact\n                    path={route.path}\n                    component={route.component}\n                  />\n                ))}              \n              </Switch>\n            </div>\n          </Content>\n          <Footer style={{ textAlign: 'center', backgroundColor: '#000' }}>\n            <Text type='success'>Font: Ergast Developer API</Text>\n          </Footer>\n        </Layout>\n        </Router>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ConfigProvider } from 'antd';\nimport ptBR from 'antd/lib/locale/pt_BR';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConfigProvider locale={ptBR}>\n      <App />\n    </ConfigProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}